scoped enumeration：
    形式： enum class/struct name{mode1, mode2, mode3};
    作用域：遵循常规作用域准则，枚举类型的作用域之外是不可直接访问的，只能在枚举类型本身的相同作用域内通过  类名:: 访问成员。
    类型转换：不会进行隐式转换。
    默认成员类型：int。

unscoped enumeration：
    形式：  1.enum name{mode1, mode2, mode3};
            2.enum {mode1, mode2, mode3};
            如果enum是未命名的,则我们只能在定义enum时定义它的对象，和匿名类的定义相似。如：enum {red, green} color; color = green;
    作用域：与枚举类型本身的相同作用域相同，可以直接访问成员。
    类型转换：会自动转换成整型。
    默认成员类型：不存在默认成员类型，我们只知道该类型足够大，能够容纳枚举值。

common:
    默认情况枚举值从0开始依次加1，也可以自己指定，枚举值不一定唯一；
    枚举成员是const,因此在初始化枚举成员时提供的初始值必须是常量表达式
    可以自己指定枚举成员类型，如：enum color :unsigned char{};
    enum前置声明和定义必须匹配。
    我们不能直接将整型值传给enum形参，但是可以讲一个不限定作用域的枚举类型的对象或枚举成员传给整型形参。此时，enum的值提升为INT或者更大的整型，实际提升结果由枚举类型的潜在类型决定。
用途：
    1.switch语句；
    2.非类型模版形参；
    3.在类的定义中初始化枚举类型的静态数据成员；